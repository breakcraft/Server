[label,pvp_ranged_attack]
if (~duel_arena_ranged_check = false) {
    return;
}
if (.%death = ^true) {
    p_stopaction;
    return;
}
if (%action_delay > map_clock) {
    p_opplayer(2);
    return;
}
// this can be either the quiver or rhand.
def_obj $rhand = inv_getobj(worn, ^wearpos_rhand);
if ($rhand = null) {
    %action_delay = add(map_clock, 4);
} else {
    %action_delay = add(map_clock, oc_param($rhand, attackrate));
}
if (%damagestyle = ^style_ranged_rapid) {
    %action_delay = sub(%action_delay, 1);
}
def_obj $ammo = ~player_ranged_check_ammo($rhand);
if ($ammo = null) {
    p_stopaction;
    ~update_all($rhand);
    return;
}

p_opplayer(2);
~set_pk_vars;

def_int $damage = 0;
// not sure if xp multipler exists for us or not?!
// https://oldschool.runescape.wiki/w/Combat#PvP_bonus_experience
if (~pvp_hit_roll(%damagetype) = true) {
    def_int $maxhit = %com_maxhit;
    if (~.check_protect_prayer(^ranged_style) = true) {
        $maxhit = scale(6, 10, $maxhit); // reduction of 40%
    }
    $damage = min(randominc($maxhit), .stat(hitpoints)); // tick eating existed! https://oldschool.runescape.wiki/w/Update:The_Wintertodt
    ~give_combat_experience_pvp(%damagestyle, $damage, ~pvp_xp_multiplier(~.player_combat_level));
    both_heropoints($damage);
}
def_int $poison_severity = oc_param($ammo, poison_severity); // ammo will never be null
if ($damage > 0 & $poison_severity > 0 & random(4) = 0) { // 1/4 chance to poison
    .queue(poison_player, 0, $poison_severity);
}

def_int $delay = ~pvp_ranged_use_weapon($rhand, $ammo);
anim(%com_attackanim, 0);
sound_synth(%com_attacksound, 0, 0);
.sound_synth(%com_attacksound, 0, 0);

.queue(pvp_retaliate, calc($delay / 30), uid);
~.pvp_damage(calc($delay / 30), $damage);

.anim(.%com_defendanim, $delay);
// .sound_synth(.%com_defendsound, 0, 20);
// sound_synth(.%com_defendsound, 0, 20);


[proc,pvp_ranged_use_weapon](obj $rhand, obj $ammo)(int)
if ($ammo = ogre_arrow) spotanim_pl(oc_param($ammo, proj_launch), 50, 0);
else spotanim_pl(oc_param($ammo, proj_launch), 96, 0);
def_int $delay = 30;
switch_category(oc_category($rhand)) {
    case weapon_bow, weapon_crossbow :
        $delay = ~player_projectile(coord, .coord, .uid, oc_param($ammo, proj_travel), 40, 36, 41, 15, 5, 11, 5);
        ~ranged_dropammo_pvp($ammo, calc($delay / 30));
    case weapon_thrown, weapon_javelin :
        $delay = ~player_projectile(coord, .coord, .uid, oc_param($ammo, proj_travel), 40, 36, 32, 15, 0, 11, 5);
        ~ranged_dropammo_pvp($ammo, calc($delay / 30));
        if (inv_total(worn, $ammo) = 0) {
            mes("That was your last one!");
            p_stopaction;
            ~update_all($rhand);
        }
}
return($delay);

[proc,ranged_dropammo_pvp](obj $ammo, int $delay)
if($ammo = holy_water) {
    ~ranged_dropammo_holywater(.coord, $delay);
    return;
}
if (random(^dropammo_chance) ! 0) {
    if (~in_duel_arena(coord) = true) {
        inv_moveitem(worn, duelarrows, $ammo, 1);
        return;
    } else if (map_blocked(.coord) = false) {
        inv_dropitem_delayed(worn, .coord, $ammo, 1, ^lootdrop_duration, max($delay, 0));
        return;
    }
}
inv_del(worn, $ammo, 1);

[proc,ranged_dropammo_pvp_specific](obj $ammo, coord $coord, int $delay)
if($ammo = holy_water) {
    ~ranged_dropammo_holywater($coord, $delay);
    return;
}
if (random(^dropammo_chance) ! 0) {
    if (~in_duel_arena(coord) = true) {
        inv_moveitem(worn, duelarrows, $ammo, 1);
        return;
    } else if (map_blocked($coord) = false) {
        inv_dropitem_delayed(worn, $coord, $ammo, 1, ^lootdrop_duration, max($delay, 0));
        return;
    }
}
inv_del(worn, $ammo, 1);